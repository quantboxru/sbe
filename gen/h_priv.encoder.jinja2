{% macro create_group_encoders(prefix, fields) %}
{%     for f in fields if f.type.type == "group" %}
   {{package}}_group_encoder_t {{prefix}}_{{f.name}}_grp_encoder;
{{create_group_encoders(prefix+"_"+f.name, f.fields)-}}
{%     endfor %}
{% endmacro -%}

{% macro create_group_structs(prefix, fields) %}
{%     for g in fields if g.type.type == "group" %}
typedef struct
{
{%         for f in g.fields %}
{%         if f.type.type == "simple" %}
{%            if f.type.length %}
   {{f.type|c_type}} {{f.name}}[{{f.type.length}}];
{%            else %}
   {{f.type|c_type}} {{f.name}};
{%            endif %}
{%         elif f.type.type == "enum" %}
   {{package}}_{{f.type.name}}_t {{f.name}};
{%         elif f.type.type == "composite" %}
   {{f.type|c_type}}_t {{f.name}};
{%         endif %}
{% endfor %}
} {{prefix}}_{{g.name}}_t;

{{create_group_structs(prefix+"_"+g.name, g.fields)-}}
{%     endfor %}
{% endmacro -%}

/**
  * @brief CAUTION: do not change this file - it is autogenerated.
  */

#include "{{env.header}}"
#include <common/xroad_aux.h>

typedef struct
{
   uint16_t block_length;
   uint16_t template_id;
   uint16_t schema_id;
   uint16_t version;
} message_header_t;

typedef struct
{
   uint16_t length;
   char data[];
} var_string_t;

typedef struct
{
   uint16_t block_length;
   uint16_t num_in_group;
} group_size_encoding_t;

typedef struct
{
   {{package}}_templates_t tid;
   char* data;
   size_t len;
   {{package}}_logger_cback_t cback;
   size_t var_offset;
} encoder_t;

struct {{package}}_group_encoder_s
{
   void* encoder;
   uint16_t idx;
   char* data;
};

typedef struct {{package}}_group_encoder_s {{package}}_group_encoder_t;

struct {{package}}_default_encoder_s
{
   encoder_t base;
};

{% for m in messages if m|has_groups %}
struct {{package}}_{{m.name}}_encoder_s
{
   encoder_t base;
{{create_group_encoders(m.name, m.fields)-}}
};
{% endfor -%}

// types
{% for t in types if t.type == "composite" %}
typedef struct
{
{%     for t in t.types %}
{%         if t.type == "simple" %}
{%             if t.length %}
   {{t|c_type}} {{t.name}}[{{t.length}}];
{%             else %}
   {{t|c_type}} {{t.name}};
{%             endif %}
{%         endif %}
{%     endfor %}
} {{t.name}}Type_t;
{% endfor %}

// groups
{% for m in messages %}
{{create_group_structs(m.name, m.fields)-}}
{% endfor -%}

// messages
{% for m in messages %}
typedef struct
{
{% for f in m.fields %}
{%    if f.type.type == "simple" %}
{%        if f.type.length %}
   {{f.type|c_type}} {{f.name}}[{{f.type.length}}];
{%        else %}
   {{f.type|c_type}} {{f.name}};
{%        endif %}
{%    elif f.type.type == "enum" %}
   {{package}}_{{f.type.name}}_t {{f.name}};
{%    elif f.type.type == "composite" %}
   {{f.type|c_type}}_t {{f.name}};
{%    endif %}
{% endfor %}
} {{m.name}}_t;

{% endfor -%}
