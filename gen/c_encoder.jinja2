{% macro create_group_encoders(prefix, fields) %}
{%     for f in fields if f.type.type == "group" %}
   struct {{package}}_group_encoder_t {{prefix}}_{{f.name}}_grp_encoder;
{{create_group_encoders(prefix+"_"+f.name, f.fields)-}}
{%     endfor %}
{% endmacro -%}


{% macro create_group_structs(prefix, fields) %}
{%     for g in fields if g.type.type == "group" %}
#pragma pack(push)
#pragma pack(1)
typedef struct
{
{%         for f in g.fields %}
{%         if f.type.type == "simple" %}
{%            if f.type.length == 0 %}
   {{f.type|c_type}} {{f.name}}[];
{%            elif f.type.length > 1 %}
   {{f.type|c_type}} {{f.name}}[{{f.type.length}}];
{%            else %}
   {{f.type|c_type}} {{f.name}};
{%            endif %}
{%         elif f.type.type == "enum" %}
   {{package}}_{{f.type.name}}_t {{f.name}};
{%         elif f.type.type == "composite" %}
   {{f.type|c_type}}_t {{f.name}};
{%         endif %}
{% endfor %}
} {{prefix}}_{{g.name}}_t;
#pragma pack(pop)

{{create_group_structs(prefix+"_"+g.name, g.fields)-}}
{%     endfor %}
{% endmacro -%}


{% macro typedef_group_encoders(prefix, fields) %}
{%     for f in fields if f.type.type == "group" %}
typedef {{package}}_group_encoder_t {{prefix}}_{{f.name}}_encoder_t;

{{           typedef_group_encoders(prefix+"_"+f.name, f.fields)-}}
{%     endfor %}
{% endmacro -%}

/**
  * @brief CAUTION: do not change this file - it is autogenerated.
  */

#include "{{env.header}}"
#include "utils.h"
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <unistd.h>

#ifdef __cplusplus
extern "C"
{
#endif

{#
typedef enum
{
{% for m in messages %}
   {{package}}_template_{{m.name}} = {{m.id}},
{% endfor %}
} {{package}}_templates_t;
#}

#pragma pack(push)
#pragma pack(1)
typedef struct
{
   uint16_t blockLength;
   uint16_t template_id;
   uint16_t schema_id;
   uint16_t version;
} message_header_t;
#pragma pack(pop)


#pragma pack(push)
#pragma pack(1)
typedef struct
{
   uint16_t blockLength;
   uint16_t numInGroup;
} group_size_encoding_t;
#pragma pack(pop)


typedef struct
{
   char* data;
   size_t len;
   char* objp;
   size_t var_offset;
} base_encoder_t;


struct {{package}}_group_encoder_t
{
   void* encoder;
   char* dimp;
   char* objp;
   size_t idx;
};


{% for m in messages if m|has_groups %}
struct {{package}}_{{m.name}}_encoder_t
{
   base_encoder_t base;
{{create_group_encoders(m.name, m.fields)-}}
};
{% endfor %}

{#
{% for m in messages %}
{{-typedef_group_encoders(package+"_"+m.name, m.fields)-}}
{% endfor -%}
#}

// types

{% for t in types if t.type == "composite" %}
#pragma pack(push)
#pragma pack(1)
typedef struct
{
{%     for t in t.types %}
{%         if t.type == "simple" %}
{%             if t.length == 0 %}
   {{t|c_type}} {{t.name}}[];
{%             elif t.length > 1 %}
   {{t|c_type}} {{t.name}}[{{t.length}}];
{%             else %}
   {{t|c_type}} {{t.name}};
{%             endif %}
{%         endif %}
{%     endfor %}
} {{t.name}}Type_t;
#pragma pack(pop)


{% endfor -%}


// groups

{% for m in messages %}
{{create_group_structs(m.name, m.fields)-}}

{% endfor -%}


// messages

{% for m in messages %}
#pragma pack(push)
#pragma pack(1)
typedef struct
{
{% for f in m.fields %}
{%    if f.type.type == "simple" %}
{%        if f.type.length == 0 %}
   {{f.type|c_type}} {{f.name}}[];
{%        elif f.type.length > 1 %}
   {{f.type|c_type}} {{f.name}}[{{f.type.length}}];
{%        else %}
   {{f.type|c_type}} {{f.name}};
{%        endif %}
{%    elif f.type.type == "enum" %}
   {{package}}_{{f.type.name}}_t {{f.name}};
{%    elif f.type.type == "composite" %}
   {{f.type|c_type}}_t {{f.name}};
{%    endif %}
{% endfor %}
} {{m.name}}_t;
#pragma pack(pop)


{% endfor -%}


{% macro render_fields(m, e, prefix, is_grp) -%}
{%    for f in e.fields %}
{%        if f.type.type in ["simple", "enum"] %}
//--------------------------------------------------------------------------------------------------------------------//
{%            if f.type.type == "enum"  %}
void {{package}}_{{prefix}}_set_{{f.name}}({{package}}_{{prefix}}_encoder_t* d, {{package}}_{{f.type.name}}_t val)
{%            elif f.type.type == "simple" and f.type.length != 1 %}
void {{package}}_{{prefix}}_set_{{f.name}}({{package}}_{{prefix}}_encoder_t* d, const {{f.type|c_type}}* val, size_t len)
{%            else %}
void {{package}}_{{prefix}}_set_{{f.name}}({{package}}_{{prefix}}_encoder_t* d, {{f.type|c_type_decl}} val)
{%            endif  %}
{
{%            if is_grp == false %}
   base_encoder_t* base = &d->base;
   {{e.name}}_t* obj = ({{e.name}}_t*)base->objp;
{%            else %}
   {{prefix}}_t* obj = ({{prefix}}_t*)d->objp;
{%            endif %}
{%            if f.type.length != 1 %}
   memcpy(obj->{{f.name}}, val, xroad_min(len, {{f.type.length}}));
{%            else %}
   obj->{{f.name}} = val;
{%            endif %}
}

{%            if f.type.presence == "optional" %}
//--------------------------------------------------------------------------------------------------------------------//
void {{package}}_{{prefix}}_reset_{{f.name}}({{package}}_{{prefix}}_encoder_t* d)
{
{%                if is_grp == false %}
   base_encoder_t* base = &d->base;
   {{e.name}}_t* obj = ({{e.name}}_t*)base->objp;
{%                else %}
   {{prefix}}_t* obj = ({{prefix}}_t*)d->objp;
{%                endif %}
{%                if f.type.length != 1 %}
   memcpy(obj->{{f.name}}, "{{f.type.null_value}}", xroad_min(strlen("{{f.type.null_value}}"), {{f.type.length}}));
{%                else %}
   obj->{{f.name}} = {{f.type.null_value}};
{%                endif %}
}

{%            endif %}
{%        elif f.type.type == "data" %}
//--------------------------------------------------------------------------------------------------------------------//
void {{package}}_{{prefix}}_set_{{f.name}}({{package}}_{{prefix}}_encoder_t* e, const {{f.dimension_type.data_type|c_type}}* val, size_t len)
{
{%                if is_grp == false %}
   {{package}}_{{m.name}}_encoder_t* encoder = e;
{%                else %}
   {{package}}_{{m.name}}_encoder_t* encoder = ({{package}}_{{m.name}}_encoder_t*)e->encoder;
{%                endif %}

   {{f.dimension_type.type.name}}Type_t* dim = ({{f.dimension_type.type.name}}Type_t*)(encoder->base.data + encoder->base.var_offset);
   dim->{{f.dimension_type.length_type.name}} = len;
   memcpy(dim->{{f.dimension_type.data_type.name}}, val, len);
   encoder->base.var_offset += sizeof({{f.dimension_type.type.name}}Type_t) + len;
}

{%        elif f.type.type == "composite" %}
{%            for t in f.type.types %}
//--------------------------------------------------------------------------------------------------------------------//
{%                if t.type == "simple" and t.length != 1 %}
void {{package}}_{{prefix}}_set_{{f.name}}_{{t.name}}({{package}}_{{prefix}}_encoder_t* d, const {{t|c_type}}* val, size_t len)
{%                else %}
void {{package}}_{{prefix}}_set_{{f.name}}_{{t.name}}({{package}}_{{prefix}}_encoder_t* d, {{t|c_type_decl}} val)
{%                endif  %}
{
{%                if is_grp == false %}
   base_encoder_t* base = &d->base;
   {{e.name}}_t* obj = ({{e.name}}_t*)base->objp;
{%                else %}
   {{prefix}}_t* obj = ({{prefix}}_t*)d->objp;
{%                endif %}
{%                if t.length != 1 %}
   memcpy(obj->{{f.name}}.{{t.name}}, val.data, xroad_min(val.len, {{t.length}}));
{%                else %}
   obj->{{f.name}}.{{t.name}} = val;
{%                endif %}
}
{%            endfor %}

{%        elif f.type.type == "group" %}
{%            if f.dimension_type == "groupSizeEncoding" %}
{%                set grp_dimension_type = "group_size_encoding_t" %}
{%            else %}
{%                set grp_dimension_type = f.dimension_type + "Type_t" %}
{%            endif %}
//--------------------------------------------------------------------------------------------------------------------//
{{package}}_{{prefix}}_{{f.name}}_encoder_t* {{package}}_{{prefix}}_add_{{f.name}}({{package}}_{{prefix}}_encoder_t* d, uint16_t num)
{
{%                if is_grp == false %}
   {{package}}_{{m.name}}_encoder_t* encoder = d;
{%                else %}
   {{package}}_{{m.name}}_encoder_t* encoder = ({{package}}_{{m.name}}_encoder_t*)d->encoder;
{%                endif %}

   encoder->{{prefix}}_{{f.name}}_grp_encoder.idx = -1;
   encoder->{{prefix}}_{{f.name}}_grp_encoder.encoder = encoder;
   encoder->{{prefix}}_{{f.name}}_grp_encoder.dimp = encoder->base.data + encoder->base.var_offset;
   {{grp_dimension_type}}* dim = ({{grp_dimension_type}}*)encoder->{{prefix}}_{{f.name}}_grp_encoder.dimp;
   dim->blockLength = sizeof({{prefix}}_{{f.name}}_t);
   dim->numInGroup = num;
   encoder->base.var_offset += sizeof({{grp_dimension_type}});
   return &encoder->{{prefix}}_{{f.name}}_grp_encoder;
}

//--------------------------------------------------------------------------------------------------------------------//
uint16_t {{package}}_{{prefix}}_{{f.name}}_encode_get_idx({{package}}_{{prefix}}_{{f.name}}_encoder_t* d)
{
   return d->idx;
}

//--------------------------------------------------------------------------------------------------------------------//
{{package}}_{{prefix}}_{{f.name}}_encoder_t* {{package}}_{{prefix}}_{{f.name}}_encode_next({{package}}_{{prefix}}_{{f.name}}_encoder_t* d)
{
   {{package}}_{{m.name}}_encoder_t* encoder = ({{package}}_{{m.name}}_encoder_t*)d->encoder;
   {{grp_dimension_type}}* dim = ({{grp_dimension_type}}*)d->dimp;

   ++d->idx;
   {# printf("\n%s: idx=%d, numInGroup=%d, dimp=%p, objp=%p\n", __func__, (int)d->idx, (int)dim->numInGroup, d->dimp, d->objp); #}
   if (d->idx < dim->numInGroup)
   {
      d->objp = encoder->base.data + encoder->base.var_offset;
      encoder->base.var_offset += dim->blockLength;
      return d;
   }
   --d->idx;
   return NULL;
}

{{            render_fields(m, f, prefix+"_"+f.name, true)-}}
{%        endif %}
{%    endfor %}
{% endmacro -%}

//--------------------------------------------------------------------------------------------------------------------//
void* {{package}}_encoder_create({{package}}_templates_t id, char* data, size_t len)
{
   switch(id)
   {
{% for m in messages %}
      case {{package}}_template_{{m.name}}:
      {
         message_header_t* hdr = (message_header_t*)data;
         hdr->template_id = id;
         hdr->schema_id = {{schema_id}};
         hdr->version = {{version}};
         hdr->blockLength = sizeof({{m.name}}_t);

         {{package}}_{{m.name}}_encoder_t* encoder = calloc(1, sizeof({{package}}_{{m.name}}_encoder_t));
         encoder->base.data = data;
         encoder->base.len = len;
         encoder->base.objp = data + sizeof(message_header_t);
         encoder->base.var_offset = sizeof(message_header_t) + hdr->blockLength;
         return encoder;
      }
{% endfor %}
   }
   return NULL;
}

//--------------------------------------------------------------------------------------------------------------------//
void {{package}}_encoder_destroy(void* encoder)
{
   free(encoder);
}

{% for m in messages %}
//--------------------------------------------------------------------------------------------------------------------//
size_t {{package}}_{{m.name}}_encoder_get_encoded_length({{package}}_{{m.name}}_encoder_t* e)
{
   return e->base.var_offset;
}

{{render_fields(m, m, m.name, false)-}}
{% endfor %}

#ifdef __cplusplus
}
#endif
